import { useState, useLayoutEffect } from 'react';

export function useFullScreenStatus(elRef) {
  const [isFullscreen, setIsFullscreen] = useState(document[getBrowserFullscreenElementProp()] != null);


  const setFullscreen = () => {
    if (elRef.current === null) {
      return;
    }

    elRef.current
      .requestFullScreen()
      .then(() => {
        setIsFullscreen(document[getBrowserFullscreenElementProp()] != null);
      })
      .catch(() => {
        setIsFullScreen(false);
      });
  };

  useLayoutEffect(() => {
    document.onfullscreenchange = () => {
      setIsFullscreen(document[getBrowserFullscreenElementProp()] != null);
      return () => (document.onfullscreenchange = undefined);
    };
  });

  return [isFullscreen, setFullscreen]
}


function getBrowserFullscreenElementProp() {
  if (typeof document.fullscreenElement !== 'undefined') {
    return 'fullscreenElement';
  } else if (typeof document.mozFullScreenElement !== 'undefined') {
    return 'mozFullScreenElement';
  } else if (typeof document.msFullscreenElement !== 'undefined') {
    return 'msFullscreenElement';
  } else if (typeof document.webkitFullscreenElement !== 'undefined') {
    return 'webkitFullscreenElement';
  }

  throw new Error('fullscreenElement не поддерживается вашим браузером');

}
